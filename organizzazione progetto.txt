Struttura progetto (usiamo Application Factory pattern e Blueprints) basato su : https://hackersandslackers.com/flask-blueprints/

*   The Flask Application Factory pattern :
    Notice there's no app.py, main.py, or anything of the sort in our base directory. 
	Instead, the entirety of our app lives in the /application folder, with the creation of our app happening in __init__.py. 
	The init file is where we actually create what's called the Application Factory.

	If you're wondering how we deploy an app where the main entry point isn't in the root directory, 
	I'm very proud of you. Yes, our app is being created in application/__init__.py, 
	so a file called wsgi.py simply imports this file to serve as our app gateway.


*	A Blueprint :
    is a way to organize a group of related views and other code. 
	Rather than registering views and other code directly with an application, they are registered with a blueprint. 
	Then the blueprint is registered with the application when it is available in the factory function.

/Prometheus_Query_Microservice
├── /applicationModule          modulo principale che contiene essenzialmente l'istanziazione della applicazione
│   ├── __init__.py             file che contiene la Application Factory ~ funzione per istanziare e configurare l'applicazione

│   ├── api.py                  chiamate ad api che restituiscono dati ??? Da definire

│   ├── models.py               model per generiche per url_prefix "/"
│   ├── routes.py               routes generiche per url_prefix "/"

│   ├── /home                   Blueprint home : routes per url_prefix "/home"
│   │   ├── /templates          template Jinjia per la realizzazione di pagine HTML dinamiche da esporre ai Client
│   │   ├── /static             directory per i files static (*.css, *.js ecc.)
│   │   └── models.py 			model per il prefix /home
│   │   └── routes.py 			routes per il prefix /home

│   ├── /prometheus             Blueprint prometheus : routes per url_prefix "/Prometheus"
│   │   ├── /templates          template Jinjia per la realizzazione di pagine HTML dinamiche da esporre ai Client
│   │   ├── /static             directory per i files static (*.css, *.js ecc.)
│   │   └── models.py 			model per il prefix /prometheus
│   │   └── routes.py 			routes per il prefix /prometheus

│   ├── /auth                   Blueprint auth : routes per url_prefix "/login" "/logout" "/register"
│   │   ├── /templates          template Jinjia per la realizzazione di pagine HTML dinamiche da esporre ai Client
│   │   ├── /static             directory per i files static (*.css, *.js ecc.)
│   │   └── models.py 			model per il prefix /auth
│   │   └── routes.py 			routes per il prefix /auth
............
............

│   ├── /static                 directory per i files static (*.css, *.js ecc.)
│   └── /templates              template Jinjia per la realizzazione di pagine HTML dinamiche da esporre ai Client

├── README.md
├── config.py                   file di configurazione che attinge dalle variabili d'ambiente e usato per configurare l'applicazione
├── .env                        file con le variabili d'ambiente nel formato Key=Value di cui fare il setting nella macchina Host(Developer o Production)
├── requirements.txt            dipendenze progetto : usato da Dockerfile
└── wsgi.py                     Entry Point per l'applicazione

